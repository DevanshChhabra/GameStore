@page "/game"
@page "/game/{GameId:int}"
@using GameStoreNew.Models
@using GameStoreNew.IService
@inject IGameService GameService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>@title</PageTitle>

<h3>@title</h3>

@if(game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-sm-4">
            <EditForm Model="@game" OnValidSubmit="HandleSubmit">  
                <DataAnnotationsValidator/>
                <ValidationSummary/>    
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="game.Name" class="form-control"></InputText>
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputSelect id="genre" @bind-Value="game.Genre" class="form-select">
                        <option value="">Select Genre</option>
                        <option value="Fighting">Fighting</option>
                        <option value="Kids and Family">Kids and Family</option>
                        <option value="Racing">Racing</option>
                        <option value="Roleplaying">Roleplaying</option>
                        <option value="Sports">Sports</option>
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="game.Price" class="form-control"></InputNumber>
                </div>
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date:</label>
                    <InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control"></InputDate>
                </div>

                <button type="submit" class="btn btn-outline-primary">Save</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="@Cancel">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public int? GameId { get; set; }

    private Game? game;
    private string title = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (GameId.HasValue)
        {
            game = await GameService.GetGame(GameId.Value);
            title = $"Edit {game?.Name}";
        }
        else
        {
            game = new Game
            {
                
                Name = string.Empty,
                Genre = string.Empty,
                Price = 0.0F,
                ReleaseDate = DateTime.UtcNow
            };
            title = "New Game";
        }
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine("Came here 2");
        try
        {
            if (game!.GameId == 0)
            {
                
                await GameService.AddGame(game);
            }
            else
            {
                await GameService.UpdateGame(game);
            }
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding game: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
