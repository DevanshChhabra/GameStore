@page "/"
@using GameStoreNew.Models
@using GameStoreNew.IService
@inject IGameService GameService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Game Catalog</PageTitle> 

<div class="row mb-4">
    <div class="col sm-6">
        <button class="btn btn-primary" @onclick="CreateGame">New Game</button>
    </div>
</div>

@if (games is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DeleteGame Game="@currentGame" OnClose="OnDeleteModalClose"></DeleteGame>
    <table class="table table-striped table-hover table-bordered mt-3">
        <thead class="table-dark">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Genre</th>
                <th>Price</th>
                <th>Release Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in games)
            {
                <tr>
                    <td>@game.GameId</td>
                    <td>@game.Name</td>
                    <td>@game.Genre</td>
                    <td>@game.Price</td>
                    <td>@game.ReleaseDate.ToString("dd/MM/yyyy")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditGame(game.GameId)">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </button>
                        <button 
                            class="btn btn-danger" 
                            data-bs-toggle="modal" 
                            data-bs-target="#deleteModal" 
                            @onclick="() => currentGame=game">
                            <span class="oi oi-x" aria-hidden="true"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Game> games;
    private Game? currentGame;

    protected override async Task OnInitializedAsync()
    {
        @* Console.WriteLine("Came here1"); *@
        @* await CreateGame(); *@
        
        games = await GameService.GetGames();
    }

    public void CreateGame()
    {
        Console.WriteLine("Came here 1");
        @* Task.Delay(100); *@
        NavigationManager.NavigateTo("/game");
    }

    private void EditGame(int GameId)
    {
        Console.WriteLine("Came here 3");
        NavigationManager.NavigateTo($"/game/{GameId}");
    }

    private async Task OnDeleteModalClose(bool accepted)
    {
        if (accepted && currentGame != null)
        {
            Console.WriteLine("Came here 4");
            await GameService.DeleteGame(currentGame.GameId);
            games = await GameService.GetGames();
        }
    }
}
